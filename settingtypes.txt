# This file contains settings of Antum game that can be changed in
# minetest.conf


# ---------------------------------------------------------------------------------

[General]


# Tools & weapons will wear down & break when used for digging, chopping, etc.
enable_tool_wear (Tools wear & break on use) bool true

# Tools & weapons will wear down & break when used for attacking/fighting.
enable_weapon_wear (Weapons wear & break when fighting) bool true

# Logs extra debug messages.
enable_debug_mods (Enable debugging messages) bool false

# Limits flowing liquids.
liquid_finite (Finite liquid) bool false

# Inventory interface to use.
inventory (Inventory interface) enum sfinv sfinv,inventory_plus


[*Mobiles (Mobs)]

# Announce to all players when & where a mob is spawned.
display_mob_spawn (Announce spawn) bool false

# Display blood spatter during battle.
mobs_enable_blood (Enable blood) bool false

mobs_spawn_protected (Spawn protected) int 0

# Only spawn mobs that don't attack players.
only_peaceful_mobs (Peaceful only) bool false

remove_far_mobs (Remove far mobs) bool false


# ---------------------------------------------------------------------------------

[Mods]


[*airtanks]

# If 'enable_tool_wear' is enabled, air tanks will begin to wear out when used.
airtanks_enable_wear (Wear out when used) bool true

# If 'airtanks_enable_wear' is enabled, air tanks will wear out even in creative mode.
airtanks_wear_in_creative (Wear out in creative mode) bool true

# Number of uses for steel air tanks.
airtanks_steel_uses (Steel air tank uses) int 30 2 1000

# Number of uses for copper air tanks.
airtanks_copper_uses (Copper air tank uses) int 10 2 1000

# Number of uses for bronze air tanks.
airtanks_bronze_uses (Bronze air tank uses) int 20 2 1000


[*bedrock2]

# Sets the height (Y) at which the bedrock layer will be created.
bedrock2_y (Bedrock height) int -30912


[*biome_lib]

# To slow down the playback of the queue (e.g. for really slow machines where
# the 0.2 second max limiter isn't enough). Default is 100 (basically percent
# of maximum runtime).
biome_lib_queue_run_ratio (Queue playback speed) int 100 1 100


[*chatlog]

# Whether month is displayed before day in timestamp (E.g. 'dd/mm/yyyy' vs. 'mm/dd/yy').
chatlog.monthfirst (Timestamp shows month before day) bool true


[*craftguide]

# Enables/Disables craftguide button in inventory if sfinv mod present.
craftguide.show_inv_button (Show craftguide in inventory) bool false


[*hbarmor]

#If true, automatically hides the armor HUD bar when the player wears no
#armor. Otherwise, the armor bar shows “0%”.
hbarmor_autohide (Automatically hide armor HUD bar) bool true

#Time difference in seconds between updates to the armor HUD bar.
#Increase this number for slow servers.
hbarmor_tick (Armor HUD bar update frequency) float 0.1 0.0 4.0


[*hbsprint]

# If enabled (default), the stamina indicators in the HUD will be automatically hidden shortly
# after stamina has filled up. Otherwise, stamina will always be displayed.
hudbars_autohide_stamina (Automatically hide staminal indicator) bool true

# Sprint speed multiplier.
sprint_speed (Sprint speed multiplier) float 1.5

# Sprint jump multiplier.
sprint_jump (Sprint jump multiplier) float 1.3

# Which key to use for sprint. Default: "Use" ("E" key by default).
sprint_key (Sprint key) enum Use Use

# Require player to move forward only to be able to sprint.
sprint_forward_only (Sprint forward only) bool true

# The amount of particles to spawn behind a sprinting player.
sprint_particles (Particles) float 2

# Drain stamina while sprinting.
sprint_stamina (Stamina) bool true

# The amount of stamina to drain while sprinting.
sprint_stamina_drain (Stamina drain) float 2

# The amount of seconds before starting to replenish stamina.
sprint_stamina_replenish (Stamina replenish) float 2

# Drain satiation while sprinting.
sprint_starve (Starve) bool true

# The amount of satiation to drain while sprinting.
sprint_starve_drain (Starve drain) float 0.5

# Drain air while sprinting under water.
sprint_breath (Breath) bool true

# The amount of air to drain while sprinting under water.
sprint_breath_drain (Breath drain) float 1


[*hidename]

# Use alpha color level to hide nametag instead of clearing text.
hidename.use_alpha (Use nametag alpha level) bool false


[*hudbars]

[**Appearance]

# Specifies how the value indicators (i.e. health, breah, etc.) look.
#
# There are 3 styles available. You can choose between the default
# progress-bar-like bars and the good old statbars like you know from
# vanilla Minetest.
#
# The following values are allowed:
# | ■ progress_bar:
# |     ● A horizontal progress-bar-like bar with a label, showing
# |       numerical value (current, maximum), and an icon. These
# |       bars usually convey the most information. This is the
# |       default and recommended value.
# | ■ statbar_classic:
# |     ● Classic statbar, like in vanilla Minetest. Made out of
# |       up to 20 half-symbols. Those bars represent the vague
# |       ratio between the current value and the maximum value.
# |       1 half-symbol stands for approximately 5% of the maximum
# |       value.
# | ■ statbar_modern:
# |     ● Like the classic statbar, but also supports background
# |       images, this kind of statbar may be considered to be
# |       more user-friendly than the classic statbar. This bar
# |       type closely resembles the mod “Better HUD” [hud] by
# |       BlockMen.
hudbars_bar_type (HUD bars style) enum progress_bar progress_bar,statbar_classic,statbar_modern


# If enabled (default), the breath indicators in the HUD will be automatically hidden shortly
# after the breath has been filled up. Otherwise, the breath will always be displayed.
hudbars_autohide_breath (Automatically hide breath indicators) bool true

# This setting changes the way the HUD bars are ordered on the display. You can choose
# between a zig-zag pattern (default) or a vertically stacked pattern.
#
# The following values are allowed:
# | ■ zigzag:
# |     ● Starting from the left bottom, the next is right
# |       from the first, the next is above the first, the
# |       next is right of the third, etc.
# | ■ stack_up:
# |     ● The HUD bars are stacked vertically, going upwards.
# | ■ stack_down:
# |     ● The HUD bars are stacked vertically, going downwards.
hudbars_alignment_pattern (HUD bars alignment pattern) enum zigzag zigzag,stack_up,stack_down

# This setting allows you to specify the order of the HUD bars explicitly. If left empty
# (the default), the health and breath indicators come first, additional indicators
# may appear in any order. This setting is quite technical and normal users probably do not
# need to worry about it.
#
# Syntax:
# The setting has to be specified as a comma-seperated list of key=value pairs, where a key
# refers to the identifier of a HUD bar and the value refers to the slot number of where the
# HUD bar should be placed. The slot number must be an integer greater of equal to 0. Where
# the HUD bars will be displayed exactly depends on the alignment pattern being used.
# All HUD bars to which no order value has been applied will fill in all slots which have
# not been occupied by the HUD bars specified in this setting, the slots will be filled in
# from the lowest slot number.
# Note that the order of those remaining HUD bars is not fixed, it basically just boils
# down on which mod “came” first. Don't worry, the mod will still work perfectly fine, this
# setting is entirely optional.
# The identifier for the health bar is “health” and the identifier for the breath bar is
# “breath”. For other HUD bars, you have to learn it from the mod which is supplying them.
#
# Be careful not to use slot indices twice, or else different HUD bars will be drawn over
# each other!
#
# Example: “breath=0, health=1”
# This makes the breath bar first and the health bar second, which is the opposite order
# of the default one.
hudbars_sorting (HUD bars order) string

[**Positions and offsets]

# Horizontal (x) main position of the HUD bars over the entire screen.
# 0.0 is left-most, 1.0 is right-most.
# For the zig-zag alignment pattern, this is for the left HUD bars.
hudbars_pos_left_x (Left HUD bar screen x position) float 0.5 0.0 1.0

# Vertical (y) main position of the HUD bars over the entire screen.
# 0.0 is top, 1.0 is bottom.
# For the zig-zag alignment pattern, this is for the left HUD bars.
hudbars_pos_left_y (Left HUD bar screen y position) float 1.0 0.0 1.0

# Horizontal (x) main position of the right HUD bars over the entire screen.
# 0.0 is left-most, 1.0 is right-most.
# Only used for the zig-zag alignment pattern.
hudbars_pos_right_x (Right HUD bar screen x position) float 0.5 0.0 1.0

# Vertical main position (y) of the right HUD bars over the entire screen.
# 0.0 is top, 1.0 is bottom.
# Only used for the zig-zag alignment pattern.
hudbars_pos_right_y (Right HUD bar screen y position) float 1.0 0.0 1.0

# Precise x offset in pixels from the basic screen x position of the HUD bars.
# For the zig-zag alignment pattern, this is for the left HUD bars.
# This setting is used for the progress bar HUD bar style.
hudbars_start_offset_left_x (Left HUD bar x offset) int -175

# Precise y offset in pixels from the basic screen y position of the HUD bars.
# For the zig-zag alignment pattern, this is for the left HUD bars.
# This setting is used for the progress bar HUD bar style.
hudbars_start_offset_left_y (Left HUD bar y offset) int -86

# Precise x offset in pixels from the basic screen x position of the right HUD bars.
# Only used for the zig-zag alignment pattern.
# This setting is used for the progress bar HUD bar style.
hudbars_start_offset_right_x (Right HUD bar x offset) int 15

# Precise y offset in pixels from the basic screen y position of the right HUD bars.
# Only used for the zig-zag alignment pattern.
# This setting is used for the progress bar HUD bar style.
hudbars_start_offset_right_y (Right HUD bar y offset) int -86

# Precise x offset in pixels from the basic screen x position of the HUD statbars.
# For the zig-zag alignment pattern, this is for the left HUD statbars.
# This setting is used for the classic and modern statbar styles.
hudbars_start_statbar_offset_left_x (Left HUD statbar x offset) int -265

# Precise y offset in pixels from the basic screen y position of the HUD statbars.
# For the zig-zag alignment pattern, this is for the left HUD statbars.
# This setting is used for the classic and modern statbar styles.
hudbars_start_statbar_offset_left_y (Left HUD statbar y offset) int -90

# Precise x offset in pixels from the basic screen x position of the right HUD statbars.
# Only used for the zig-zag alignment pattern.
# This setting is used for the classic and modern statbar styles.
hudbars_start_statbar_offset_right_x (Right HUD statbar x offset) int 25

# Precise y offset in pixels from the basic screen y position of the right HUD statbars.
# Only used for the zig-zag alignment pattern.
# This setting is used for the classic and modern statbar styles.
hudbars_start_statbar_offset_right_y (Right HUD statbar y offset) int -90

# The vertical distance between two HUD bars, in pixels.
hudbars_vmargin (Vertical distance between HUD bars) int 24 0

[**Performance]

# The of seconds which need to pass before the server updates the default HUD bars
# (health and breath). Increase this number if you have a slow server or a slow network
# connection and experience performance problems.
hudbars_tick (Default HUD bars update interval) float 0.1 0.0 4.0


[*listitems]

# Displays items in a bulleted list.
listitems.bullet_list (Bulleted list) bool true

# Enables/Disables "list" chat command.
listitems.enable_generic (Enable generic "list" command) bool false

# Enables/Disables "listmobs" chat command (requires "mobs").
listitems.enable_mobs (Enable "listmobs" command) bool true


[*mobs_redo]

# If false then mobs no longer spawn in world without spawner or spawn egg
mobs_spawn (Spawn Mobs) bool true

# If enabled then monsters no longer spawn in world
only_peaceful_mobs (Only spawn peaceful Mobs) bool false

# Disable blood splatter when attacking mobs.
mobs_disable_blood (Disable Mob blood) bool false

# If disabled then Mobs no longer destroy world blocks
mobs_griefing (Griefing Mobs) bool true

# If false then Mobs no longer spawn inside player protected areas
mobs_spawn_protected (Spawn Mobs in protected areas) bool true

# If true Mobs will be removed once a map chunk is out of view
remove_far_mobs (Remove far Mobs) bool true

# Sets Mob difficulty level by multiplying punch damage
mob_difficulty (Mob difficulty) float 1.0

# If disabled health status no longer appears above Mob when punched
mob_show_health (Show Mob health) bool true

# Contains a value used to multiply Mob spawn values
mob_chance_multiplier (Mob chance multiplier) float 1.0

# When false Mob no longer drop items when killed
mobs_drop_items (Mob drops) bool true


[*pipeworks]

#Enable pipes.
pipeworks_enable_pipes (Enable Pipes) bool true

#Enable autocrafter.
pipeworks_enable_autocrafter (Enable Autocrafter) bool true

#Enable deployer.
pipeworks_enable_deployer (Enable Deployer) bool true

#Enable dispenser.
pipeworks_enable_dispenser (Enable Dispenser) bool true

#Enable node breaker.
pipeworks_enable_node_breaker (Enable Node Breaker) bool true

#Enable teleport tube.
pipeworks_enable_teleport_tube (Enable Teleport Tube) bool true

#Enable pipe devices.
pipeworks_enable_pipe_devices (Enable Pipe Devices) bool true

#Enable redefines.
pipeworks_enable_redefines (Enable Node Redefines) bool true

#Enable sorting tube.
pipeworks_enable_mese_tube (Enable Sorting Tube) bool true

#Enable detector tube.
pipeworks_enable_detector_tube (Enable Detector Tube) bool true

#Enable digiline detector tube.
pipeworks_enable_digiline_detector_tube (Enable Digiline Detector Tube) bool true

#Enable mesecon signal conducting tube.
pipeworks_enable_conductor_tube (Enable Conductor Tube) bool true

#Enable accelerator tube.
pipeworks_enable_accelerator_tube (Enable Accelerator Tube) bool true

#Enable crossing tube.
#It sends all incoming items to the other side, or if there is no other tube, it sends them back.
pipeworks_enable_crossing_tube (Enable Crossing Tube) bool true

#Enable vacuum tube.
#It picks up all items that lay around next to it.
pipeworks_enable_sand_tube (Enable Vacuum Tube) bool true

#Enable mese vacuum tube.
#It's like the normal vacuum tube with the
#differance that you can set the radius up to 8 nodes.
pipeworks_enable_mese_sand_tube (Enable Mese Vacuum Tube) bool true

#Enable one way tube.
#It sends items only in one direction.
#Use it to drop items out of tubes.
pipeworks_enable_one_way_tube (Enable One Way Tube) bool true

#Enable high priority tube.
#It has a very high priority and so, on crossings, the items will
#always go to it if there are multible ways.
pipeworks_enable_priority_tube (Enable High Priority Tube) bool true

#Enable cyclic mode.
pipeworks_enable_cyclic_mode (Enable Cyclic Mode) bool true

#Drop on routing fail.
pipeworks_drop_on_routing_fail (Drop On Routing Fail) bool false

#Delete item on clearobject.
pipeworks_delete_item_on_clearobject (Delete Item On Clearobject) bool true


[*playeranim]

# Version of player model.
#
# Player models supported by this mod:
# | ■ MTG_4_Jun_2017
# |     ● minetest_game after 4 Jun 2017, 0.4.16
# | ■ MTG_4_Nov_2017
# |     ● minetest_game after 4 Nov 2017, 0.5.0
playeranim.model_version (Version of player model) enum MTG_4_Jun_2017 MTG_4_Jun_2017,MTG_4_Nov_2017

# The number of frame delay of sideways body rotation. (between 1 and 20).
playeranim.body_rotation_delay (The delay of sideways body rotation) int 7 1 20

# The degrees of the body's X-axis rotation in sneaking.
playeranim.body_x_rotation_sneak (Lengthways body rotation in sneaking) float 6.0

# The number of stepping per seconds.
playeranim.animation_speed (The speed of an animation) float 2.4

# The number of stepping per seconds in sneaking.
playeranim.animation_speed_sneak (The speed of an animation in sneaking) float 0.8


[*pvp_areas]

# Allow PvP by default.
pvp_areas.enable_pvp (PvP by default) bool false

# When not enabled PvP Control areas are kill zones.
pvp_areas.safemode (PvP Control areas are safe zones) bool false

# If ShadowNinja's `areas` mod is also present with HUD registration feature,
# this label will be displayed anywhere a PvP Control area has been set.
pvp_areas.label (Show PvP area labels) string Defined area.


[*slingshot]

# Require rubber band as additional ingredient in slingshot craft recipes.
slingshot.require_rubber_band (Require rubber band in craft recipe) bool true


[*sneeker]

# Sets maximum number of spawns that can exist in world.
sneeker.spawn_cap (Maximum spawns) int 10

# Sets possibility for spawn.
sneeker.spawn_chance (Spawn chance) int 1000

# Sets frequency of spawn chance.
#    Default 2400 is equivalent to 2 minutes (60 * 4).
sneeker.spawn_interval (Spawn interval) int 2400

# Sets the maximum light that a node can have for spawn to occur.
sneeker.spawn_maxlight (Max node light for spawn) int 5


[*spawneggs]

spawneggs.egg_interval (Spawn interval) int 600
spawneggs.egg_chance (Spawn chance) int 3000
spawneggs.grass_interval (Grass interval) int 600
spawneggs.grass_chance (Grass chance) int 3000

# Allow eggs to spawn randomly in the world.
spawneggs.enable_node_spawn (Enable node spawn) bool true


[*trampoline]

# Percent of damage absorbed when falling on a trampoline. Set to 100 to disable damage.
trampoline.damage_absorb (Trampoline damage absorption) int 100 0 100


[*whitelist]

# Enables/Disables whitelist feature.
whitelist.enable (Enable whitelist) bool false

# Sets a custom message to display when access to server is denied.
whitelist.message (Whitelist message) string This server is whitelisted and you are not on the whitelist.


# ---------------------------------------------------------------------------------

[Modpacks]


[*3D Armor]


[**3d_armor]

armor_material_wood (Enable wood armor) bool true
armor_material_cactus (Enable cactus armor) bool true
armor_material_steel (Enable steel armor) bool true
armor_material_bronze (Enable bronze armor) bool true
armor_material_diamond (Enable diamond armor) bool true
armor_material_gold (Enable gold armor) bool true
armor_material_mithril (Enable mithril armor) bool true
armor_material_crystal (Enable crystal armor) bool true

# Increase this if you get initialization glitches when a player first joins.
armor_init_delay (Initialization delay) int 2

# Number of initialization attempts.
# Use in conjunction with armor_init_delay if initialization problems persist.
armor_init_times (Initialization attempts) int 10

# Increase this if armor is not getting into bones due to server lag.
armor_bones_delay (Delay for bones) int 1

# How often player armor items are updated.
armor_update_time (Armor refresh rate [seconds]) int 1

# Drop armor when a player dies.
# Uses bones mod if present, otherwise items are dropped around the player.
armor_drop (Drop armor on death) bool true

# Pulverize armor when a player dies, overrides armor_drop.
armor_destroy (Pulverize armor on death) bool false

# You can use this to increase or decrease overall armor effectiveness,
# eg: level_multiplier = 0.5 will reduce armor level by half.
armor_level_multiplier (Armor effectiveness multiplier) float 1

# You can use this to increase or decrease overall armor healing,
# eg: armor_heal_multiplier = 0 will disable healing altogether.
armor_heal_multiplier (Armor healing multiplier) float 1

# Enable water protection (periodically restores breath when activated).
armor_water_protect (Enable water protection) bool true

# Enable fire protection (defaults true if using ethereal mod).
armor_fire_protect (Enable fire protection) bool false

# Enable punch damage effects.
armor_punch_damage (Enable damage effects) bool true

# Enable migration of old armor inventories.
armor_migrate_old_inventory (Migrate old armor inventories) bool true


[**shields]

shields_disable_sounds (Disable shield sounds) bool false


[**wieldview]

# Set number of seconds between visible wielded item updates.
wieldview_update_time (Wieldview refresh rate [seconds]) int 2

# Show nodes as tiles, disabled by default.
wieldview_node_tiles (Show nodes as tiles) bool false


[*Animal Materials]


[**animalmaterials]

# Registers 'animalmaterials:lass' as alias of 'mobs:magic_lasso' if 'mobs' mod
# is available.
animalmaterials.override_lasso (Use 'magic_lasso' from 'mobs' mod) bool false


[*Animals (Aggressive)]


[**mob_shark]

# Interval in seconds that specifies how often shark spawns.
mobs.shark_interval (Shark spawn interval) int 60 0

# Chance for each node of spawning shark at each interval. The value
# is inverted. So a chance of value of 9000 equals 1/9000.
mobs.shark_chance (Shark spawn chance) int 9000 0

# Minimum node light required for spawning. "0" is darkest & "14" is
# lightest (daylight).
# See: [Node definition] light_source
mobs.shark_min_light (Shark min spawn light) int 4 0 14

# Maximum node light required for spawning. "0" is darkest & "14" is
# lightest (daylight).
# See: [Node definition] light_source
mobs.shark_max_light (Shark max spawn light) int 14 0 14

# Minimum height at which shark can spawn.
mobs.shark_min_height (Shark min spawn height) int -30

# Maximum height at which shark can spawn.
mobs.shark_max_height (Shark max spawn height) int -3

# Times that shark can spawn.
#
# Modes supported:
# | ■ day:   spawns during day
# | ■ night: spawns during night
# | ■ any:   spawns anytime
mobs.shark_spawn_time (Shark spawn time) enum any day,night,any


[*Castle]


[**castle_masonry]

[***Materials]
castle_masonry_stonewall (Stonewall) bool true
castle_masonry_cobble (Cobble) bool true
castle_masonry_stonebrick (Stone Brick) bool true
castle_masonry_sandstonebrick (Sandstone Brick) bool true
castle_masonry_desertstonebrick (Desert Stone Brick) bool true
castle_masonry_stone (Stone) bool true
castle_masonry_sandstone (Sandstone) bool true
castle_masonry_desertstone (Desert Stone) bool true
castle_masonry_wood (Wood) bool false
castle_masonry_ice (Ice) bool false
castle_masonry_snow (Snow) bool false
castle_masonry_obsidianbrick (Obsidian Brick) bool false

[***Forms]
castle_masonry_pillar (Pillars) bool true
castle_masonry_arrowslit (Arrow slits) bool true
castle_masonry_murderhole (Murder holes and machicolations) bool true


[**crafting_bench]

# The number of seconds between each operation of the crafting bench.
crafting_bench_crafting_rate (Crafting rate) int 5 1 60


[*Dinosaurs (Aggressive)]

[**velociraptor]

# Used alternate "feathered" texture.
mobs.velociraptor_feathered (Feathered velociraptor) bool false

# Interval in seconds that specifies how often velociraptor spawns.
mobs.velociraptor_interval (Velociraptor spawn interval) int 30 0

# Chance for each node of spawning velociraptor at each interval. The value
# is inverted. So a chance of value of 32000 equals 1/32000.
mobs.velociraptor_chance (Velociraptor spawn chance) int 32000 0

# Minimum node light required for spawning. "0" is darkest & "14" is
# lightest (daylight).
# See: [Node definition] light_source
mobs.velociraptor_min_light (Velociraptor min spawn light) int 10 0 14

# Maximum node light required for spawning. "0" is darkest & "14" is
# lightest (daylight).
# See: [Node definition] light_source
mobs.velociraptor_max_light (Velociraptor max spawn light) int 14 0 14

# Maximum height at which velociraptor can spawn.
mobs.velociraptor_max_height (Velociraptor max spawn height) int 31000

# Times that velociraptor can spawn.
#
# Modes supported:
# | ■ day:   spawns during day
# | ■ night: spawns during night
# | ■ any:   spawns anytime
mobs.velociraptor_spawn_time (Velociraptor spawn time) enum any day,night,any


[*Mesecons]

[**mesecons]

mesecon.resumetime (Startup delay) int 4 1 10

# The value at which circuits will overheat.
mesecon.overheat_max (Device heat limit) int 20 1 100

mesecon.cooldown_time (Device cooldown time) float 2.0 0.1 10.0
mesecon.cooldown_granularity (Cooldown step length) float 0.5 0.0 1.0


[**mesecons_blinkyplant]

mesecon.blinky_plant_interval (Plant blinking interval) int 3 1 5


[**mesecons_detector]

mesecon.detector_radius (Player detector scanning radius) int 6 3 16
mesecon.node_detector_distance_max (Node detector distance limit) int 10 1 16


[**mesecons_luacontroller]

mesecon.luacontroller_string_rep_max (string:rep result length limit) int 64000 1000 1000000
mesecon.luacontroller_digiline_maxlen (Digiline message size limit) int 50000 1000 1000000
mesecon.luacontroller_maxevents (Controller execution time limit) int 10000 1000 100000
mesecon.luacontroller_memsize (Controller memory limit) int 100000 10000 1000000


[**mesecons_movestones]

mesecon.movestone_speed (Speed) int 3 1 10
mesecon.movestone_max_push (Max push) int 50 1 100
mesecon.movestone_max_pull (Max pull) int 50 1 100


[**mesecons_pistons]

mesecon.piston_max_push (Max push) int 15 1 100
mesecon.piston_max_pull (Max pull) int 15 1 100


[**mesecons_pressureplates]

mesecon.pplate_interval (Check interval) float 0.1 0.1 1.0


[*Minetest Game]

[**beds]

# If enabled, players respawn at the bed they last lay on instead of normal
# spawn.
# This setting is only read at startup.
enable_bed_respawn (Respawn at bed) bool true

# If enabled, the night can be skipped if more than half of the players are
# in beds.
enable_bed_night_skip (Skip night when sleeping) bool true

# If enabled with 'enable_bed_night_skip', allows any single player in bed
# to skip night.
enable_single_night_skip (Skip night if any player in bed) bool false

[**bones]

# Manages how item loss is handled when a player dies.
#
# Modes supported:
# | ■ bones:
# |     ● Bones containing player's inventory contents are
# |       placed where/near player died.
# | ■ drop:
# |     ● Inventory contents are dropped on the ground.
# | ■ keep:
# |     ● Player does not lose items at death.
bones_mode (Bones mode) enum bones bones,drop,keep

# The time in seconds after which the bones of a dead player can be looted
# by everyone.
#
# Setting this to 0 will disable sharing of bones completely.
share_bones_time (Bones share time) int 1200 0

# How much earlier the bones of a dead player can be looted by everyone if
# the player dies in a protected area they don't own.
#
# 0 to disable. Default is "share_bones_time" divide by four (300).
share_bones_time_early (Bones early share time) int 300 0

# Inform player of condition and location of new bones.
bones_position_message (Inform player about bones) bool false

[**creative]

# In creative mode players are able to dig all kind of blocks nearly
# instantly, and have access to unlimited resources.
#
# Some of the functionality is only available if this setting is present
# at startup.
creative_mode (Creative mode) bool false

[**default]

# If enabled, lava will "cool" & turn into stone & obsidian when touching
# water.
enable_lavacooling (Lavacooling) bool true

[**fire]

# Flammable nodes will be ignited by nearby igniters. Spreading fire may
# cause severe destruction.
# Spreading fire nodes will disappear when fire is disabled, but
# 'permanent_flame' nodes are unaffected.
enable_fire (Fire) bool true

# Opposite of (& overridden by) 'enable_fire'.
disable_fire (Disable fire) bool false

# Enable flame sound.
flame_sound (Flame sound) bool true

[**give_initial_stuff]

# If enabled, items defined in 'initial_stuff' setting will be given
# to players.
give_initial_stuff (Give initial items) bool false

# Defines what items new players will start with if 'give_initial_stuff' setting
# is enabled.
#
# Comma-separated list: item1,item2 10,item3
initial_stuff (Initial items) string default:sword_stone,default:pick_steel,default:apple 10

[**spawn]

# If enabled, use the engine's spawn search which does not check for a
# suitable starting biome.
engine_spawn (Use engine spawn search) bool false

[**stairs]

[***Advanced]

# Replaces old stairs with new ones (Only required for older worlds).
enable_stairs_replace_abm (Replace old stairs) bool false

[**tnt]

# When TNT explodes, it destroys nearby nodes and damages nearby players.
#
# NOTE: This setting is disabled by default on servers.
enable_tnt (TNT) bool true

# The radius in which nodes will be destroyed by a TNT explosion.
tnt_radius (TNT radius) int 3 0


[*Mob Engine]

[**creatures]

# Replace certain items with ones from "mobs" (mobs_redo) engine if available.
# E.g., 'mobs:meat_raw' will be used instead of 'creatures:flesh'.
creatures.mobs_replace_items (Use items from 'mobs' engine) bool false


[*More Mesecons]

[**moremesecons_adjustable_blinkyplant]

# Minimal interval authorized. Any lower will be set to it.
moremesecons_adjustable_blinky_plant.min_interval (Minimum interval) float 0.5

[**moremesecons_commandblock]

# Space-separated list of authorized commands (empty to authorize all).
moremesecons_commandblock.authorized_commands (Authorized commands) string tell

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_commandblock.nearest_max_distance (Nearest player maximum distance) float 8

[**moremesecons_jammer]

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_jammer.max_distance (Jammer action range) float 10

# The registration LBM will recover the jammer database if the moremesecons_jammer
# mod storage has been removed, and will create that mod storage after an update
# from an older version which did not use it.
moremesecons_jammer.enable_lbm (Enable Jammer registration LBM) bool false

[**moremesecons_playerkiller]

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_playerkiller.max_distance (Player Killer action range) float 8

[**moremesecons_sayer]

# It will work only if:
# * moremesecons_sayer is present in your trusted_mods setting
# * you are playing in singleplayer
# * the speech-dispatcher is installed on your system
# * you are using a POSIX-compliant system and a sh-compatible shell (such as bash, dash, zsh...)
moremesecons_sayer.use_speech_dispatcher (Use Speech Dispatcher) bool true

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_sayer.max_distance (Sayer range) float 8

[**moremesecons_teleporter]

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_teleporter.max_t2t_distance (Maximum teleporter-to-teleporter distance) float 50

# Any value less than or equal to 0 will be set to 1
moremesecons_teleporter.max_p2t_distance (Maximum player-to-teleporter distance) float 25

# The registration LBM will recover a teleporter network if the moremesecons_teleporter
# mod storage has been removed, and will create that mod storage after an update
# from an older version which did not use it.
moremesecons_teleporter.enable_lbm (Enable Teleporter registration LBM) bool false

[**moremesecons_wireless]

# Any value less than or equal to 0 will be changed to 1 and a NaN value will be changed to the default value.
moremesecons_wireless.jammer_max_distance (Wireless Jammer action range) float 15

# The registration LBM will recover a wireless network if the moremesecons_wireless
# mod storage has been removed, and will create that mod storage after an update
# from an older version which did not use it.
moremesecons_wireless.enable_lbm (Enable Wireless registration LBM) bool false
